/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ql.spriteeditor;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author simon
 */
public class SpriteEditor extends javax.swing.JFrame
{
    private static final long serialVersionUID=1L;

    private static File libraryFile=null;
    transient protected Library library=null;
    transient protected Sprite sprite=null;
    transient int currentSprite=-1;

    /**
     * Creates new form SpriteEditor
     */
    public SpriteEditor()
    {
        initComponents();

        if(libraryFile!=null) loadLibrary();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        colourButtonGroup = new javax.swing.ButtonGroup();
        libraryPanel = new LibraryPanel();
        spritePanel = new javax.swing.JPanel();
        toolPanel = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        clearButton = new javax.swing.JButton();
        blankRadioButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        fillToggleButton = new javax.swing.JToggleButton();
        pixelPanel = new SpritePanel();
        duplicateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        flipHButton = new javax.swing.JButton();
        flipVButton = new javax.swing.JButton();
        rotateCWButton = new javax.swing.JButton();
        rotateCCWButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        spriteMenuBar = new javax.swing.JMenuBar();
        libraryMenu = new javax.swing.JMenu();
        newLibMenuItem = new javax.swing.JMenuItem();
        openLibMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        clearLibrartMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        spriteMenu = new javax.swing.JMenu();
        swapSpriteMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        libraryPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout libraryPanelLayout = new javax.swing.GroupLayout(libraryPanel);
        libraryPanel.setLayout(libraryPanelLayout);
        libraryPanelLayout.setHorizontalGroup(
            libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );
        libraryPanelLayout.setVerticalGroup(
            libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        spritePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        toolPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        colourButtonGroup.add(jRadioButton1);
        jRadioButton1.setText("Black");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton1ActionPerformed(evt);
            }
        });

        colourButtonGroup.add(jRadioButton2);
        jRadioButton2.setText("Blue");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton2ActionPerformed(evt);
            }
        });

        colourButtonGroup.add(jRadioButton3);
        jRadioButton3.setText("Red");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton3ActionPerformed(evt);
            }
        });

        colourButtonGroup.add(jRadioButton4);
        jRadioButton4.setText("Magenta");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton4ActionPerformed(evt);
            }
        });

        colourButtonGroup.add(jRadioButton5);
        jRadioButton5.setText("Green");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton5ActionPerformed(evt);
            }
        });

        colourButtonGroup.add(jRadioButton6);
        jRadioButton6.setText("Cyan");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton6ActionPerformed(evt);
            }
        });

        colourButtonGroup.add(jRadioButton7);
        jRadioButton7.setText("Yellow");
        jRadioButton7.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton7ActionPerformed(evt);
            }
        });

        colourButtonGroup.add(jRadioButton8);
        jRadioButton8.setSelected(true);
        jRadioButton8.setText("White");
        jRadioButton8.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jRadioButton8ActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearButtonActionPerformed(evt);
            }
        });

        colourButtonGroup.add(blankRadioButton);
        blankRadioButton.setText("Blank");
        blankRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                blankRadioButtonActionPerformed(evt);
            }
        });

        fillToggleButton.setText("Fill");
        fillToggleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fillToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toolPanelLayout = new javax.swing.GroupLayout(toolPanel);
        toolPanel.setLayout(toolPanelLayout);
        toolPanelLayout.setHorizontalGroup(
            toolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolPanelLayout.createSequentialGroup()
                .addGroup(toolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(clearButton))
            .addComponent(jSeparator1)
            .addGroup(toolPanelLayout.createSequentialGroup()
                .addGroup(toolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton7)
                    .addComponent(jRadioButton6)
                    .addComponent(jRadioButton8)
                    .addComponent(blankRadioButton)
                    .addComponent(fillToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        toolPanelLayout.setVerticalGroup(
            toolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolPanelLayout.createSequentialGroup()
                .addGroup(toolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(toolPanelLayout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2))
                    .addComponent(clearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton8)
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(blankRadioButton)
                .addGap(18, 18, 18)
                .addComponent(fillToggleButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pixelPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pixelPanelLayout = new javax.swing.GroupLayout(pixelPanel);
        pixelPanel.setLayout(pixelPanelLayout);
        pixelPanelLayout.setHorizontalGroup(
            pixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 853, Short.MAX_VALUE)
        );
        pixelPanelLayout.setVerticalGroup(
            pixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 714, Short.MAX_VALUE)
        );

        duplicateButton.setText("Duplicate");
        duplicateButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                duplicateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteButtonActionPerformed(evt);
            }
        });

        flipHButton.setText("Flip H");
        flipHButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                flipHButtonActionPerformed(evt);
            }
        });

        flipVButton.setText("Flip V");
        flipVButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                flipVButtonActionPerformed(evt);
            }
        });

        rotateCWButton.setText("Rotate CW");
        rotateCWButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rotateCWButtonActionPerformed(evt);
            }
        });

        rotateCCWButton.setText("Rotate CCW");
        rotateCCWButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rotateCCWButtonActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout spritePanelLayout = new javax.swing.GroupLayout(spritePanel);
        spritePanel.setLayout(spritePanelLayout);
        spritePanelLayout.setHorizontalGroup(
            spritePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, spritePanelLayout.createSequentialGroup()
                .addGroup(spritePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pixelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(spritePanelLayout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flipHButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flipVButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rotateCWButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rotateCCWButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        spritePanelLayout.setVerticalGroup(
            spritePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(spritePanelLayout.createSequentialGroup()
                .addGroup(spritePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(duplicateButton)
                    .addComponent(deleteButton)
                    .addComponent(flipHButton)
                    .addComponent(flipVButton)
                    .addComponent(rotateCWButton)
                    .addComponent(rotateCCWButton)
                    .addComponent(newButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pixelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        libraryMenu.setText("Library");

        newLibMenuItem.setText("New library...");
        newLibMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newLibMenuItemActionPerformed(evt);
            }
        });
        libraryMenu.add(newLibMenuItem);

        openLibMenuItem.setText("Open library...");
        openLibMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openLibMenuItemActionPerformed(evt);
            }
        });
        libraryMenu.add(openLibMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        saveMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveMenuItemActionPerformed(evt);
            }
        });
        libraryMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save as...");
        saveAsMenuItem.setEnabled(false);
        libraryMenu.add(saveAsMenuItem);

        closeMenuItem.setText("Close");
        closeMenuItem.setEnabled(false);
        libraryMenu.add(closeMenuItem);

        clearLibrartMenuItem.setText("Clear library");
        clearLibrartMenuItem.setEnabled(false);
        clearLibrartMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearLibrartMenuItemActionPerformed(evt);
            }
        });
        libraryMenu.add(clearLibrartMenuItem);

        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitMenuItemActionPerformed(evt);
            }
        });
        libraryMenu.add(quitMenuItem);

        spriteMenuBar.add(libraryMenu);

        spriteMenu.setText("Sprite");

        swapSpriteMenuItem.setText("Swap sprites");
        swapSpriteMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                swapSpriteMenuItemActionPerformed(evt);
            }
        });
        spriteMenu.add(swapSpriteMenuItem);

        spriteMenuBar.add(spriteMenu);

        setJMenuBar(spriteMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(libraryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spritePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(libraryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(spritePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitMenuItemActionPerformed
    {//GEN-HEADEREND:event_quitMenuItemActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void newLibMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newLibMenuItemActionPerformed
    {//GEN-HEADEREND:event_newLibMenuItemActionPerformed
        final JFileChooser chooser = new JFileChooser();

        chooser.setFileFilter(new FileNameExtensionFilter("Sprite Libraries", "lib"));
        chooser.setApproveButtonText("Create library");
        chooser.setDialogTitle("Create new library");
        chooser.setMultiSelectionEnabled(false);

        final int returnVal = chooser.showOpenDialog(this);

        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            if(chooser.getSelectedFile().exists())
            {
                JOptionPane.showMessageDialog(this,"Library already present", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                libraryFile=chooser.getSelectedFile();
                if(!libraryFile.getName().endsWith(".lib")) libraryFile=new File(libraryFile.getAbsolutePath()+".lib");

                setTitle(libraryFile.getName());
                library=new Library();
                library.setModified(false);

                saveMenuItem.setEnabled(true);
                saveAsMenuItem.setEnabled(true);
                closeMenuItem.setEnabled(true);
                newLibMenuItem.setEnabled(false);
                clearLibrartMenuItem.setEnabled(true);
            }
        }
    }//GEN-LAST:event_newLibMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveMenuItemActionPerformed
    {//GEN-HEADEREND:event_saveMenuItemActionPerformed
        try
        {
            library.save(libraryFile);
            library.setModified(false);
        }
        catch(final FileNotFoundException e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openLibMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openLibMenuItemActionPerformed
    {//GEN-HEADEREND:event_openLibMenuItemActionPerformed
        final JFileChooser chooser = new JFileChooser();

        chooser.setFileFilter(new FileNameExtensionFilter("Sprite Libraries", "lib"));
        chooser.setApproveButtonText("Open library");
        chooser.setDialogTitle("Open library");
        chooser.setMultiSelectionEnabled(false);

        final int returnVal = chooser.showOpenDialog(this);

        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            if(!chooser.getSelectedFile().exists())
            {
                JOptionPane.showMessageDialog(this,"Library not found", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                libraryFile=chooser.getSelectedFile();

                loadLibrary();
            }
        }
    }//GEN-LAST:event_openLibMenuItemActionPerformed

    public void loadLibrary()
    {
        if(!libraryFile.getName().endsWith(".lib")) libraryFile=new File(libraryFile.getAbsolutePath()+".lib");

        setTitle(libraryFile.getName());

        try
        {
            library=Library.load(libraryFile);
            library.setModified(false);

            currentSprite=library.size()==0?-1:0;

            sprite=currentSprite==-1?null:library.get(currentSprite);
            ((SpritePanel)pixelPanel).setSprite(sprite);
            libraryPanel.repaint();

            saveMenuItem.setEnabled(true);
            saveAsMenuItem.setEnabled(true);
            closeMenuItem.setEnabled(true);
            newLibMenuItem.setEnabled(false);
            clearLibrartMenuItem.setEnabled(true);
        }
        catch(final IOException e)
        {
            JOptionPane.showMessageDialog(this,"Error reading library file", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton2ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton2ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.BLUE);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton8ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton8ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.WHITE);
    }//GEN-LAST:event_jRadioButton8ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton1ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton1ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.BLACK);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton3ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton3ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.RED);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton4ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton4ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.MAGENTA);
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton5ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton5ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.GREEN);
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton6ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton6ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.CYAN);
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jRadioButton7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton7ActionPerformed
    {//GEN-HEADEREND:event_jRadioButton7ActionPerformed
        ((SpritePanel)pixelPanel).setColour(Color.YELLOW);
    }//GEN-LAST:event_jRadioButton7ActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
    {//GEN-HEADEREND:event_clearButtonActionPerformed
        sprite.clear();
        pixelPanel.repaint();
        //System.out.println(sprite);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void clearLibrartMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearLibrartMenuItemActionPerformed
    {//GEN-HEADEREND:event_clearLibrartMenuItemActionPerformed
        library.clear();

        libraryPanel.repaint();
        pixelPanel.repaint();
    }//GEN-LAST:event_clearLibrartMenuItemActionPerformed

    private void transparantRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_transparantRadioButtonActionPerformed
    {//GEN-HEADEREND:event_transparantRadioButtonActionPerformed
        ((SpritePanel)pixelPanel).setColour(null);
    }//GEN-LAST:event_transparantRadioButtonActionPerformed

    private void blankRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_blankRadioButtonActionPerformed
    {//GEN-HEADEREND:event_blankRadioButtonActionPerformed
        ((SpritePanel)pixelPanel).setColour(null);
    }//GEN-LAST:event_blankRadioButtonActionPerformed

    private void swapSpriteMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_swapSpriteMenuItemActionPerformed
    {//GEN-HEADEREND:event_swapSpriteMenuItemActionPerformed
        new SwapSpriteJFrame(SpriteEditor.this).setVisible(true);
        ((LibraryPanel)libraryPanel).libraryPanelUpdate.set(true);
    }//GEN-LAST:event_swapSpriteMenuItemActionPerformed

    double[] rotatePoint(final double centreX,final double centreY,double angleInRadians,double x,double y)
    {
        angleInRadians*=Math.PI/180.0;

        final double s = Math.sin(angleInRadians);
        final double c = Math.cos(angleInRadians);

        // translate point back to origin:
        x-=centreX;
        y-=centreY;

        // rotate point
        final double xnew = x * c - y * s;
        final double ynew = x * s + y * c;

        // translate point back:
        x = xnew + centreX;
        y = ynew + centreY;

        return new double[]{x,y};
    }

    private void rotate(final Sprite s,final double angle)
    {
        final Color r[][]=new Color[s.getX()][s.getY()];

        // Rotation point=middle of sprite
        final double mx=s.getX()/2.0;
        final double my=s.getY()/2.0;

        for(int y=0;y<s.getY();y++)
        {
            for(int x=0;x<s.getX();x++)
            {
                final double p[]=rotatePoint(mx,my,angle,x+0.5,y+0.5); // Rotate mid-point of pixel

                r[(int)p[0]][(int)p[1]]=s.getColour(x, y);
            }
        }

        // Copy rotated colors back to sprite
        for(int x=0;x<s.getX();x++)
            for(int y=0;y<s.getY();y++)
                s.setColour(x,y,r[x][y]);
    }
    private void fillToggleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fillToggleButtonActionPerformed
    {//GEN-HEADEREND:event_fillToggleButtonActionPerformed

    }//GEN-LAST:event_fillToggleButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newButtonActionPerformed
    {//GEN-HEADEREND:event_newButtonActionPerformed
        new newSpriteJFrame(SpriteEditor.this).setVisible(true);
        libraryPanel.repaint();
    }//GEN-LAST:event_newButtonActionPerformed

    private void duplicateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_duplicateButtonActionPerformed
    {//GEN-HEADEREND:event_duplicateButtonActionPerformed
        if(sprite!=null)
        {
            final Sprite s=sprite.duplicate();

            library.add(s);
            currentSprite=library.size()-1;
            sprite=library.get(currentSprite);

            ((SpritePanel)pixelPanel).setSprite(s);

            libraryPanel.repaint();
            spritePanel.repaint();
        }
    }//GEN-LAST:event_duplicateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
    {//GEN-HEADEREND:event_deleteButtonActionPerformed
        library.delete(currentSprite);
        if(currentSprite==library.size()) currentSprite--;

        sprite=library.get(currentSprite);
        //((SpritePanel)spritePanel).sprite=sprite;

        libraryPanel.repaint();
        spritePanel.repaint();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void flipHButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_flipHButtonActionPerformed
    {//GEN-HEADEREND:event_flipHButtonActionPerformed
        for(int y=0;y<sprite.getY();y++)
        {
            for(int x=0;x<sprite.getX()/2;x++)
            {
                final Color c1=sprite.getColour(x, y);
                final Color c2=sprite.getColour(sprite.getX()-x-1, y);

                sprite.setColour(x, y, c2);
                sprite.setColour(sprite.getX()-x-1, y, c1);
            }
        }

        spritePanel.repaint();
        libraryPanel.repaint();
    }//GEN-LAST:event_flipHButtonActionPerformed

    private void flipVButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_flipVButtonActionPerformed
    {//GEN-HEADEREND:event_flipVButtonActionPerformed
        for(int y=0;y<sprite.getY()/2;y++)
        {
            for(int x=0;x<sprite.getX();x++)
            {
                final Color c1=sprite.getColour(x, y);
                final Color c2=sprite.getColour(x,sprite.getY()-y-1);

                sprite.setColour(x, y, c2);
                sprite.setColour(x,sprite.getY()-y-1,c1);
            }
        }

        spritePanel.repaint();
        libraryPanel.repaint();
    }//GEN-LAST:event_flipVButtonActionPerformed

    private void rotateCWButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rotateCWButtonActionPerformed
    {//GEN-HEADEREND:event_rotateCWButtonActionPerformed
        rotate(sprite,90);

        spritePanel.repaint();
        libraryPanel.repaint();
    }//GEN-LAST:event_rotateCWButtonActionPerformed

    private void rotateCCWButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rotateCCWButtonActionPerformed
    {//GEN-HEADEREND:event_rotateCCWButtonActionPerformed
        rotate(sprite,-90);

        spritePanel.repaint();
        libraryPanel.repaint();
    }//GEN-LAST:event_rotateCCWButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        for(int i=0;i<args.length;i++)
        {
            libraryFile=new File(args[i]);
       }

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch(ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(SpriteEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(SpriteEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(SpriteEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch(javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SpriteEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new SpriteEditor().setVisible(true);
            }
        });
    }


    public class LibraryPanel extends JPanel
    {
        private static final long serialVersionUID=1L;

        public AtomicBoolean libraryPanelUpdate=new AtomicBoolean(false);
        private final Timer timer; //use swing tools to update gui

        public LibraryPanel()
        {
            timer=new Timer(50,e -> repaint());
            timer.setDelay(50);
            timer.setRepeats(true);
            timer.start();

            this.addMouseListener(new MouseListener()
            {
                @Override public void mouseClicked(MouseEvent me)
                {
                    int x=me.getX();
                    int y=me.getY();

                    for(int i=0;i<library.size();i++)
                    {
                        final Sprite s=library.get(i);

                        final int range[]=spriteLocations.get(i);
                        if((x>=range[0])&&(x<=range[2])&&(y>=range[1])&&(y<=range[3]))
                        {
                            currentSprite=i;
                            sprite=library.get(i);

                            ((SpritePanel)pixelPanel).setSprite(s);
                            pixelPanel.repaint();
                            libraryPanel.repaint();

                            break;
                        }
                    }
                }

                @Override public void mousePressed(MouseEvent me)
                {
                }

                @Override public void mouseReleased(MouseEvent me)
                {
                }

                @Override public void mouseEntered(MouseEvent me)
                {
                }

                @Override public void mouseExited(MouseEvent me)
                {
                }
            });
        }

        final transient Map<Integer,int[]> spriteLocations=new LinkedHashMap<>();

        @Override public void paint(Graphics g)
        {
            super.paint(g);

            spriteLocations.clear();

            if(library!=null)
            {
                int y=0,x=1,newx=1;

                for(int i=0;i<library.size();i++)
                {
                    final Sprite s=library.get(i);

                    if(y+s.getY()*4>this.getHeight())
                    {
                        y=0;
                        x=newx+10;
                    }

                    if(s==sprite)
                    {
                        g.setColor(Color.GRAY);
                        g.drawRect(1,y,s.getXBytes()*16+2,s.getY()*4+2);
                    }

                    int oy=y;

                    y=s.draw(g,x,y+1,4)+5;

                    g.setColor(Color.black);
                    g.drawString(Integer.toString(i),x+s.getXBytes()*16+2,(oy+y)/2);
                    newx=Math.max(newx,s.getXBytes()*16+5);

                    spriteLocations.put(i,new int[]{x,oy,x+s.getXBytes()*16,y});
                }
            }
        }
    }

    public class SpritePanel extends JPanel
    {
        private transient Sprite sprite=null;
        private double xf,yf,f;
        private Color colour=Color.WHITE;

        private final Timer timer; //use swing tools to update gui

        public SpritePanel()
        {
            timer=new Timer(50,e -> repaint());
            timer.setDelay(50);
            timer.setRepeats(true);
            timer.start();

            this.addMouseMotionListener(new MouseMotionListener()
            {
                @Override public void mouseDragged(MouseEvent me)
                {
                    handleMouse(me,0);
                }

                @Override public void mouseMoved(MouseEvent me)
                {
                }
            });

            this.addMouseListener(new MouseListener()
            {
                @Override public void mouseClicked(MouseEvent me)
                {
                    handleMouse(me,MouseEvent.BUTTON1);
                }

                @Override public void mousePressed(MouseEvent me)
                {
                }

                @Override public void mouseReleased(MouseEvent me)
                {
                }

                @Override public void mouseEntered(MouseEvent me)
                {
                }

                @Override public void mouseExited(MouseEvent me)
                {
                }
            });
        }

        private void fill(final int x,final int y,final Color c,final Color bg)
        {
            sprite.setColour(x, y, colour);

            if((x>0)&&(sprite.getColour(x-1,y)==bg)) fill(x-1,y,c,bg);
            if((y>0)&&(sprite.getColour(x,y-1)==bg)) fill(x,y-1,c,bg);
            if((x+1<sprite.getX())&&(sprite.getColour(x+1,y)==bg)) fill(x+1,y,c,bg);
            if((y+1<sprite.getY())&&(sprite.getColour(x,y+1)==bg)) fill(x,y+1,c,bg);

        }

        private void handleMouse(final MouseEvent me,int button)
        {
            int x=me.getX(),y=me.getY();

            x=(int)(x/f);
            y=(int)(y/f);

            if(SpriteEditor.this.fillToggleButton.isSelected())
            {
                fill(x,y,colour,sprite.getColour(x, y));
                spritePanel.repaint();
                libraryPanel.repaint();
            }
            else if(me.getButton()==button)
            {

                sprite.setColour(x, y,colour);
                SpritePanel.this.repaint();
                libraryPanel.repaint();

                //System.out.println(x+"\t"+y+"\t"+sprite.getColour(x,y));
            }
        }

        public void setColour(final Color colour)
        {
            this.colour=colour;
        }

        public void setSprite(final Sprite s)
        {
            sprite=s;

            if(sprite==null) return;



            this.repaint();
        }

        public Sprite getSprite() // Needed?
        {
            return sprite;
        }

        @Override public void paint(Graphics g)
        {
            super.paint(g);

            if(sprite==null) return;

            final int y=sprite.getY(),x=16*sprite.getXBytes();
            yf=getWidth()/(y/4.0);
            xf=getHeight()/(x/4.0);

            f=Math.min(xf, yf);

            for(int a=0;a<sprite.getX();a++)
            {
                for(int b=0;b<sprite.getY();b++)
                {
                    g.setColor(Color.BLACK);
                    g.drawRect((int)(.5+a*f),(int)(.5+b*f),(int)(.5+f),(int)(.5+f));

                    final Color color=sprite.getMask(a,b)?Color.LIGHT_GRAY:sprite.getColour(a, b);

                    g.setColor(color);
                    g.fillRect((int)(.5+a*f)+1,(int)(.5+b*f)+1,(int)(.5+f)-2,(int)(.5+f)-2);

                    //if(b==0) System.out.println(sprite.getMask(a,b)+"\t"+sprite.getColour(a, b));
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton blankRadioButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JMenuItem clearLibrartMenuItem;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.ButtonGroup colourButtonGroup;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton duplicateButton;
    private javax.swing.JToggleButton fillToggleButton;
    private javax.swing.JButton flipHButton;
    private javax.swing.JButton flipVButton;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenu libraryMenu;
    private javax.swing.JPanel libraryPanel;
    private javax.swing.JButton newButton;
    private javax.swing.JMenuItem newLibMenuItem;
    private javax.swing.JMenuItem openLibMenuItem;
    protected javax.swing.JPanel pixelPanel;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton rotateCCWButton;
    private javax.swing.JButton rotateCWButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenu spriteMenu;
    private javax.swing.JMenuBar spriteMenuBar;
    private javax.swing.JPanel spritePanel;
    private javax.swing.JMenuItem swapSpriteMenuItem;
    private javax.swing.JPanel toolPanel;
    // End of variables declaration//GEN-END:variables
}
